{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/oneway\/nsway\/init(initialstate:threadoption:)","title":"init(initialState: State, threadOption: ThreadOption)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/nsway\/currentstate","title":"var currentState: State","type":"property"},{"path":"\/documentation\/oneway\/nsway\/initialstate","title":"var initialState: State","type":"property"},{"path":"\/documentation\/oneway\/nsway\/publisher","title":"var publisher: WayPublisher<State>","type":"property"},{"path":"\/documentation\/oneway\/nsway\/state","title":"var state: State","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/oneway\/nsway\/bind()","title":"func bind() -> SideWay<Action, Never>","type":"method"},{"path":"\/documentation\/oneway\/nsway\/reduce(state:action:)","title":"func reduce(state: inout State, action: Action) -> SideWay<Action, Never>","type":"method"},{"path":"\/documentation\/oneway\/nsway\/reset()","title":"func reset()","type":"method"},{"path":"\/documentation\/oneway\/nsway\/send(_:)","title":"func send(Action)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/nsway\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/oneway\/nsway\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/oneway\/nsway","title":"NSWay","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/oneway\/way\/init(initialstate:threadoption:)","title":"init(initialState: State, threadOption: ThreadOption)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/way\/currentstate","title":"var currentState: State","type":"property"},{"path":"\/documentation\/oneway\/way\/initialstate","title":"let initialState: State","type":"property"},{"path":"\/documentation\/oneway\/way\/publisher","title":"var publisher: WayPublisher<State>","type":"property"},{"path":"\/documentation\/oneway\/way\/state","title":"var state: State","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/oneway\/way\/bind()","title":"func bind() -> SideWay<Action, Never>","type":"method"},{"path":"\/documentation\/oneway\/way\/reduce(state:action:)","title":"func reduce(state: inout State, action: Action) -> SideWay<Action, Never>","type":"method"},{"path":"\/documentation\/oneway\/way\/reset()","title":"func reset()","type":"method"},{"path":"\/documentation\/oneway\/way\/send(_:)","title":"func send(Action)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/way\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/oneway\/way\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/oneway\/way","title":"Way","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/oneway\/sideway\/init(_:)","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/oneway\/sideway\/init(error:)","title":"init(error: Failure)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/sideway\/upstream","title":"let upstream: AnyPublisher<Output, Failure>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/oneway\/sideway\/map(_:)-8496p","title":"func map<T>((Output) -> T) -> SideWay<T, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/sideway\/none","title":"static var none: SideWay<Output, Failure>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/oneway\/sideway\/async(priority:operation:)-80d23","title":"static func async(priority: TaskPriority?, operation: () async -> Output) -> SideWay<Output, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/async(priority:operation:)-8xera","title":"static func async(priority: TaskPriority?, operation: () async throws -> Output) -> SideWay<Output, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/concat(_:)-24vg9","title":"static func concat(SideWay<Output, Failure>...) -> SideWay<Output, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/concat(_:)-5c1ij","title":"static func concat<C>(C) -> SideWay<Output, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/future(_:)","title":"static func future(((Result<Output, Failure>) -> Void) -> Void) -> SideWay<Output, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/just(_:)","title":"static func just(Output) -> SideWay<Output, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(_:)-2qx2n","title":"static func merge<S>(S) -> SideWay<Output, Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(_:)-59rqz","title":"static func merge(SideWay<Output, Failure>...) -> SideWay<Output, Failure>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/sideway\/values-52jeh","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"path":"\/documentation\/oneway\/sideway\/values-qu2d","title":"var values: AsyncPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/oneway\/sideway\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/oneway\/sideway\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/sideway\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/catchtonever()","title":"func catchToNever() -> SideWay<Self.Output, Never>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/catchtoreturn(_:)","title":"func catchToReturn(Self.Output) -> SideWay<Self.Output, Never>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/catchtosideway()","title":"func catchToSideWay() -> SideWay<Result<Self.Output, Self.Failure>, Never>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/catchtosideway(_:)","title":"func catchToSideWay<T>((Result<Self.Output, Self.Failure>) -> T) -> SideWay<T, Never>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/combinelatest(_:_:)-6gaup","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/combinelatest(_:_:)-8hff4","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/combinelatest(_:_:_:)-1p0hc","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/combinelatest(_:_:_:)-2x28d","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/empty(outputtype:failuretype:)","title":"func empty<EmptyOutput, EmptyFailure>(outputType: EmptyOutput.Type, failureType: EmptyFailure.Type) -> SideWay<EmptyOutput, EmptyFailure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/erasetosideway()","title":"func eraseToSideWay() -> SideWay<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/erasetosideway(_:)","title":"func eraseToSideWay<T>((Self.Output) -> T) -> SideWay<T, Self.Failure>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/flatmap(maxpublishers:_:)-1vllg","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/flatmap(maxpublishers:_:)-37nz4","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/flatmap(maxpublishers:_:)-6fdif","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/flatmap(maxpublishers:_:)-7ppld","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/map(_:)-5zbdv","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/map(_:)-7lh22","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/sideway\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/sideway\/subscribe(_:)-3w15p","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/oneway\/sideway\/subscribe(_:)-8emmf","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/sideway\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/switchtolatest()","title":"func switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/zip(_:_:)-2wtk7","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/zip(_:_:)-6o2a3","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/zip(_:_:_:)-8cj2t","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/zip(_:_:_:)-is94","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/oneway\/sideway\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/oneway\/sideway\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/oneway\/sideway","title":"SideWay","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/oneway\/waypublisher\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/oneway\/waypublisher\/subscript(dynamicmember:)","title":"subscript<LocalState>(dynamicMember _: KeyPath<State, LocalState>) -> WayPublisher<LocalState>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/oneway\/waypublisher\/failure","title":"WayPublisher.Failure","type":"typealias"},{"path":"\/documentation\/oneway\/waypublisher\/output","title":"WayPublisher.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/oneway\/waypublisher\/values-3lh3v","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"path":"\/documentation\/oneway\/waypublisher\/values-6tu20","title":"var values: AsyncPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/oneway\/waypublisher\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/catchtonever()","title":"func catchToNever() -> SideWay<Self.Output, Never>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/catchtoreturn(_:)","title":"func catchToReturn(Self.Output) -> SideWay<Self.Output, Never>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/catchtosideway()","title":"func catchToSideWay() -> SideWay<Result<Self.Output, Self.Failure>, Never>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/catchtosideway(_:)","title":"func catchToSideWay<T>((Result<Self.Output, Self.Failure>) -> T) -> SideWay<T, Never>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/combinelatest(_:_:)-3ps62","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/combinelatest(_:_:)-821l5","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/combinelatest(_:_:_:)-8wmt8","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/combinelatest(_:_:_:)-9ugxn","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/empty(outputtype:failuretype:)","title":"func empty<EmptyOutput, EmptyFailure>(outputType: EmptyOutput.Type, failureType: EmptyFailure.Type) -> SideWay<EmptyOutput, EmptyFailure>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/erasetosideway()","title":"func eraseToSideWay() -> SideWay<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/erasetosideway(_:)","title":"func eraseToSideWay<T>((Self.Output) -> T) -> SideWay<T, Self.Failure>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/flatmap(maxpublishers:_:)-4mjo1","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/flatmap(maxpublishers:_:)-6lccr","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/flatmap(maxpublishers:_:)-8d3ux","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/flatmap(maxpublishers:_:)-8mi9z","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/map(_:)-1u66g","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/map(_:)-8eaq0","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/subscribe(_:)-19k7a","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/subscribe(_:)-33o6o","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/switchtolatest()","title":"func switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/zip(_:_:)-2wgxt","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/zip(_:_:)-9v1zz","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/zip(_:_:_:)-4sol2","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/zip(_:_:_:)-m3bo","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/oneway\/waypublisher\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/oneway\/waypublisher\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/oneway\/waypublisher","title":"WayPublisher","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/oneway\/threadoption\/current","title":"case current","type":"case"},{"path":"\/documentation\/oneway\/threadoption\/threadsafe","title":"case threadSafe","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/oneway\/threadoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/oneway\/threadoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/oneway\/threadoption","title":"ThreadOption","type":"enum"}],"path":"\/documentation\/oneway","title":"OneWay","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}